name: Update Version

on:
  push:
    branches:
      - master
  pull_request:
    types:
      - closed
  release:
    types:
      - published

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Git Config
        run: |
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"

      - name: Check Actor
        id: actor_check
        run: |
          if [[ "${GITHUB_ACTOR}" == "github-actions[bot]" ]]; then
            echo "Workflow initiated by ${GITHUB_ACTOR}. Skipping update."
            echo "{skip_update}={true}" >> "$GITHUB_OUTPUT"
          else
            echo "Workflow initiated by ${GITHUB_ACTOR}. Continuing with update."
            echo "{skip_update}={false}" >> "$GITHUB_OUTPUT"
          fi

      - name: Create Branch and Update Version
        id: create_branch
        if: steps.actor_check.outputs.skip_update == false
        run: |
          # Create a new branch
          branch_name="update-version-$(date +'%Y%m%d%H%M%S')"
          # git checkout -b "$branch_name"

          # Update the "updated" field with the current date
          updated=$(date +%F)
          sed -i 's/"updated": "[^"]*"/"updated": "'"$updated"'"/' app-version.json

          # Update the "version" field with the release tag
          release_version=${GITHUB_REF#refs/tags/}
          # release_version=$(git describe --abbrev=0 --tags || true)
          # if [[ "${GITHUB_REF_TYPE}" == 'branch']]; then
          #   echo 'was triggered by commit or merge' ${GITHUB_REF_TYPE} ${release_version}
          # else
          #   echo 'was triggered by a tag' ${GITHUB_REF_TYPE} ${{github.ref.type}} ${release_version}
          # fi

          if [["${GITHUB_REF_TYPE}" == branch]]; then
            echo 'branch' ${GITHUB_REF_TYPE}
          else
            echo 'tag' ${GITHUB_REF_TYPE}
          fi
          sed -i 's/"version": "[^"]*"/"version": "'"$release_version"'"/' app-version.json

          # Commit the changes
          # git commit -am "Update 'updated' field"

          # Push the changes to the new branch
          # git push origin "$branch_name"
          
          # Output branch name
          echo "{branch}={$branch_name}" >> "$GITHUB_OUTPUT"

      - name: Create Pull Request
        if: steps.actor_check.outputs.skip_update == false
        uses: peter-evans/create-pull-request@v5
        with:
          # token: ${{ secrets.GITHUB_TOKEN }}
          # branch: 'master'
          author: GitHub Actions  <actions@github.com>
          base: ${{ github.head_ref }}
          branch: 'update/version'
          title: Update 'updated' field
          body: Automatically updated the 'updated' field in app-version.json
          delete-branch: true
      - name: Enable Pull Request Automerge
        run: gh pr merge 'update/version' --merge --delete-branch
        env:
          GH_TOKEN: ${{ github.token }}
